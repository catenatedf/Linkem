<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="7a7ff25f-5f97-4edd-8aca-7ec41b77bfaf" activeEnvironment="Default" name="Linkem-5G" resourceRoot="" soapui-version="5.6.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="c8544b63-6655-45d1-a0e7-058f832ebeee" port="8084" path="/" host="LAPTOP-CK69S8K9" name="Mock_SimCheck_PCRF_GetIMSIByIP_OK" docroot=""><con:settings/><con:properties><con:property><con:name>ip</con:name><con:value>1234</con:value></con:property></con:properties><con:restMockAction name="linkem/getimsibyip" method="GET" resourcePath="/linkem/getimsibyip" id="c0738de9-4783-4156-931a-c2bbc4f49059"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="ImsiMatch" id="c2deeba5-0444-4e4a-aff0-7dba414d884c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"sessionSummaries": [
		{
			"siteName": "MIPCRF2",
			"allSessionCount": 1,
			"afSessionCount": 0,
			"ipCanSessionCount": 1,
			"sySessionCount": 0,
			"sdSessionCount": 0,
			"gySessionCount": 0,
			"s9SessionCount": 0,
			"nasREQSessioncount": 0,
			"pduSessionCount": 0,
			"nchfSessionCount": 0,
			"amSessionCount": 0,
			"ueSessionCount": 0
		},
		{
			"siteName": "RMPCRF1",
			"allSessionCount": 1,
			"afSessionCount": 0,
			"ipCanSessionCount": 1,
			"sySessionCount": 0,
			"sdSessionCount": 0,
			"gySessionCount": 0,
			"s9SessionCount": 0,
			"nasREQSessioncount": 0,
			"pduSessionCount": 0,
			"nchfSessionCount": 0,
			"amSessionCount": 0,
			"ueSessionCount": 0
		}
	],
	"sessionDTOList": [
		{
			"sessionId": "ugw.rmcor.03;945278366;16318464;84908",
			"diameterPeerId": null,
			"diameterPeerHost": "ugw.rmcor.03",
			"expiryTimeOfOutboundMessage": null,
			"deviceId": "unknown_RMPCRF1-diameterapp-4_20210610002826514_15677",
			"sessionBindingIdentifier": {
				"apnId": "apn.linkem.com.aliasrmcor",
				"ipAddress": "10.80.163.254",
				"ipv6Prefix": "",
				"subscriptionIds": [
					{
						"data": "222380001477705",
						"originalNAIData": null,
						"type": "End User IMSI"
					}
				]
			},
			"timeOfLastMessage": 1630933834651,
			"activeFeatures": [
				{
					"vendorId": 10415,
					"featureListId": 1,
					"featureList": 2,
					"mBitFlag": false
				}
			],
			"terminating": false,
			"failedMessageCount": 0,
			"diameterPeer": {
				"modifiedBy": null,
				"modifiedDate": null,
				"distributionList": [],
				"smProvState": "NEW",
				"peerId": null,
				"active": true,
				"originHost": null,
				"primaryAddress": null,
				"ingressPeerProfileName": null,
				"egressPeerProfileName": null,
				"downStreamOverLoadProfileName": null,
				"peerConnectionProfileName": null,
				"secondaryAddresses": [],
				"portNumber": 3868,
				"protocol": null,
				"secure": false,
				"description": null,
				"locallyInitiated": null,
				"requestTimeout": null,
				"numberOfSendAttempts": null,
				"addrGrpName": null,
				"sourcePortNumber": null
			},
			"apnId": "apn.linkem.com.aliasrmcor",
			"ipAddress": "10.80.163.254",
			"ipv6Prefix": null,
			"subscriptionIds": [
				{
					"data": "222380001477705",
					"originalNAIData": null,
					"type": "End User IMSI"
				}
			],
			"vendorSpecificAttributes": {},
			"key": null,
			"isEmergency": false,
			"adjustedDefaultEPSBearerQoS": {
				"defaultBearerQCI": 8,
				"allocationRetentionPriority": {
					"priorityLevel": 4,
					"preEmptionCapability": "Pre-emption Capability Enabled",
					"preEmptionVulnerability": "Pre-emption Vulnerability Disabled"
				}
			},
			"adjustedMaxBwForAPN": {
				"upLinkBw": 10000000,
				"downLinkBw": 100000000,
				"kbps": false,
				"condApnAmbr": []
			},
			"adjustedSessionData": {
				"defaultEPSBearerQoS": {
					"defaultBearerQCI": 8,
					"allocationRetentionPriority": {
						"priorityLevel": 4,
						"preEmptionCapability": "Pre-emption Capability Enabled",
						"preEmptionVulnerability": "Pre-emption Vulnerability Disabled"
					}
				},
				"maxBwForAPN": {
					"upLinkBw": 10000000,
					"downLinkBw": 100000000,
					"kbps": false,
					"condApnAmbr": []
				}
			},
			"anTrusted": null,
			"bearerControlMode": "UE_NW",
			"bsId": null,
			"ccRequestNumber": 1,
			"defaultEPSBearerQoS": {
				"defaultBearerQCI": 8,
				"allocationRetentionPriority": {
					"priorityLevel": 4,
					"preEmptionCapability": "Pre-emption Capability Enabled",
					"preEmptionVulnerability": "Pre-emption Vulnerability Disabled"
				}
			},
			"emergency": false,
			"ipCanType": "TYPE_3GPP_EPS",
			"ipv4ANGWAddress": "172.28.0.151",
			"ipv6ANGWAddress": "",
			"maxBwForAPN": {
				"upLinkBw": 10000000,
				"downLinkBw": 100000000,
				"kbps": false,
				"condApnAmbr": []
			},
			"maximumBandwidth": null,
			"msTimezone": "8001",
			"networkRequestSupport": "NETWORK_REQUEST_SUPPORTED",
			"policyTriggerRegistrations": [
				"RAT Change",
				"User Location Change"
			],
			"qosInfo": [],
			"qosNegotiation": "QOS_NEGOTIATION_SUPPORTED",
			"rai": null,
			"ratType": "EUTRAN",
			"ratType3Gpp": null,
			"sgsnAddress": "172.28.0.151",
			"sgsnIpv6Address": "",
			"sgsnMccMnc": "22238",
			"tcpSourcePort": null,
			"triggerRegistrations": [
				"RAT Change",
				"User Location Change"
			],
			"udpSourcePort": null,
			"ueLocalIpAddress": null,
			"userLocationInfo": {
				"geoLocationType": "TAI_AND_ECGI",
				"userLocationIds": [
					{
						"identityType": "ECGI",
						"data": "22f28300a03b1e"
					},
					{
						"identityType": "TAI",
						"data": "22f2830bf5"
					}
				]
			},
			"userLocationInfoTime": null,
			"ipCanBearers": [],
			"anChargingAddr": {
				"addressFamily": "IPV_4",
				"addressValue": "172.28.0.151"
			},
			"qosUpgrade": "QOS_UPGRADE_NOT_SUPPORTED",
			"reportRegistrations": 0,
			"anChargingIdValue": "AFAF33E8",
			"pccRules": [
				{
					"activationTime": null,
					"adjustedQosInfo": null,
					"afSignallingProtocol": null,
					"anChargingIdValue": null,
					"bearerControlModeOperation": "PCRF_INITIATED",
					"bearerIdentifier": null,
					"deactivationTime": null,
					"flowInformations": [],
					"name": "default",
					"precedence": null,
					"qosInfo": null,
					"requiredAccessInfos": [],
					"ruleSource": 1,
					"ruleStatus": "ACTIVE",
					"ruleType": "PREDEFINED",
					"qosDecs": null,
					"adjustedQosDecs": null,
					"timeToLiveInRollbackCache": 0,
					"waitingForAfPeer": false,
					"afChargingIdentifier": null,
					"applicationServiceProviderIdentity": null,
					"applications": [],
					"bearerUsage": null,
					"flowStatus": null,
					"meteringMethod": null,
					"monitoringKey": null,
					"muteNotification": null,
					"offline": null,
					"online": null,
					"outOfCreditRule": [],
					"outOfCreditState": "NORMAL",
					"psToCsSessionContinuity": null,
					"qosInfoRadius": null,
					"ratingGroup": null,
					"redirectInformation": null,
					"reportingLevel": null,
					"serviceFlowDetection": null,
					"serviceFlows": [],
					"serviceId": null,
					"sponsorIdentity": null,
					"tdfApplicationIdentifier": null,
					"updated": false,
					"usageMonitoringDataIds": [],
					"trafficControlIds": [],
					"conditionDataIds": []
				}
			],
			"condPolInfo": [],
			"sessionType": "IPCANSESSION",
			"sySessionId": null,
			"online": "DISABLE_ONLINE",
			"offline": "DISABLE_OFFLINE",
			"revalidationTime": null,
			"s9Subsession": null,
			"nextScheduledReauth": null,
			"lastReauthTime": 0,
			"nextRuleStatusChangeTime": null,
			"nasPortId": null,
			"nasPortType": null,
			"logicalAccessId": null,
			"physicalAccessId": null,
			"delegatedIPv6Prefix": "",
			"sySession": null,
			"usageTracking": [],
			"ruleSetForEDR": null,
			"praInformation": [],
			"ipcanRevalidationTime": null,
			"userEquipmentInfo": {
				"type": "IMEISV",
				"value": "33353333343530393236333034373030"
			}
		}
	]
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>